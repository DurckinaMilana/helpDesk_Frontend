(()=>{"use strict";var e,t,n={180:(e,t,n)=>{function r(e){return new Promise(((t,n)=>{const{data:r,method:i}=e,o="http://localhost:7070",s=new URLSearchParams;for(const e in r)Object.prototype.hasOwnProperty.call(r,e)&&s.append(e,r[e]);const a=new XMLHttpRequest;"GET"===i?(a.open("GET",`${o}?${s}`),a.send()):"POST"===i?(a.open("POST",`${o}?${s}`),a.send(s)):"PUT"===i?(a.open("PUT",`${o}?${s}`),a.send(s)):"DELETE"===i&&(a.open("DELETE",`${o}?${s}`),a.send()),a.addEventListener("load",(()=>{a.status>=200&&a.status<300?t(JSON.parse(a.responseText)):n(console.error(`Ошибка ${a.status}`))}))}))}n(177);class i{constructor(e){this.parent=e,this.container=null,this.form=null,this.name=null,this.id=null,this.status=!1,this.description=null}init(){this.container=document.createElement("div"),this.container.classList.add("create-form"),this.container.innerHTML='\n    <h4>Добавить тикет</h4>\n    <label>Краткое описание\n      <input type="text" data-name="name" required>\n    </label>\n    <label>Подробное описание</label>\n    <textarea data-name="description" rows="2" required></textarea>\n    <div class="button">\n    <button class="button-reset" type="reset">Отмена</button>\n    <button class="button-ok" type="submit">Ok</button>\n    </div>',document.body.appendChild(this.container),this.form=document.querySelector(".create-form"),this.reset=this.form.querySelector(".button-reset"),this.submit=this.form.querySelector(".button-ok"),this.reset.addEventListener("click",this.onReset.bind(this)),this.submit.addEventListener("click",this.onSubmit.bind(this))}show(){this.container.classList.add("active")}onReset(e){e.preventDefault(),this.container.classList.remove("active")}async onSubmit(e){e.preventDefault(),this.name=this.form.querySelector('[data-name="name"]'),this.description=this.form.querySelector('[data-name="description"]'),this.params={data:{method:"createTicket",id:this.id,status:this.status,name:this.name.value,description:this.description.value},method:"POST"};try{this.parent.rawTicket(await r(this.params))}catch(e){console.log(e)}this.container.classList.remove("active")}}class o{constructor(e){this.parent=e,this.id=null,this.container=null}init(){this.container=document.createElement("div"),this.container.classList.add("delete-form"),this.container.innerHTML='<h4>Добавить тикет</h4>\n      <p>Вы уверены, что хотите удалить тикет? Это действие необратимо.</p>\n      <div class="button">\n        <button class="button-reset" type="reset">Отмена</button>\n        <button class="button-delete" type="submit">Ok</button>\n    </div>',document.body.appendChild(this.container),this.form=document.querySelector(".delete-form"),this.reset=this.form.querySelector(".button-reset"),this.submit=this.form.querySelector(".button-delete"),this.reset.addEventListener("click",this.onReset.bind(this)),this.submit.addEventListener("click",this.onDelete.bind(this))}show(e){this.id=e,this.container.classList.add("active")}onReset(e){e.preventDefault(),this.container.classList.remove("active")}async onDelete(e){e.preventDefault(),this.params={data:{method:"deleteTicket",id:this.id},method:"DELETE"};try{this.parent.rawTicket(await r(this.params))}catch(e){console.log(e)}this.container.classList.remove("active")}}class s{constructor(e){this.parent=e,this.container=null,this.form=null,this.name=null,this.id=null,this.status=!1,this.description=null,this.created=null}init(){this.container=document.createElement("div"),this.container.classList.add("edit-form"),this.container.innerHTML='\n    <h4>Изменить тикет</h4>\n    <label>Краткое описание\n      <input type="text" data-name="name" required>\n    </label>\n    <label>Подробное описание</label>\n    <textarea data-name="description" rows="2" required></textarea>\n    <div class="button">\n    <button class="button-reset" type="reset">Отмена</button>\n    <button class="button-edit" type="submit">Ok</button>\n    </div>',document.body.appendChild(this.container),this.form=document.querySelector(".edit-form"),this.reset=this.form.querySelector(".button-reset"),this.edit=this.form.querySelector(".button-edit"),this.reset.addEventListener("click",this.onReset.bind(this)),this.edit.addEventListener("click",this.onEdit.bind(this))}async show(e){this.id=e.dataset.index,this.name=e.querySelector("span").textContent,this.ticket=await this.parent.getDescription(this.id),this.description=this.ticket.description,this.status=this.ticket.status,this.created=this.ticket.created,this.container.querySelector("input").value=this.name,this.container.querySelector("textarea").value=this.description,this.container.classList.add("active")}onReset(e){e.preventDefault(),this.container.classList.remove("active")}async onEdit(e){e.preventDefault(),this.name=this.container.querySelector("input").value,this.description=this.container.querySelector("textarea").value,this.params={data:{method:"editTicket",id:this.id,status:this.status,name:this.name,description:this.description,created:this.created},method:"PUT"};try{this.parent.rawTicket(await r(this.params))}catch(e){console.log(e)}this.container.classList.remove("active")}}new class{constructor(e){this.element=e}async init(){this.createForm=new i(this),this.createForm.init(),this.deleteForm=new o(this),this.deleteForm.init(),this.editForm=new s(this),this.editForm.init(),this.params={data:{method:"allTickets"},method:"GET"};try{this.rawTicket(await r(this.params))}catch(e){console.log(e)}this.element.addEventListener("click",this.showFormDelete.bind(this)),this.element.addEventListener("click",this.showFormCreate.bind(this)),this.element.addEventListener("click",this.showDescription.bind(this)),this.element.addEventListener("click",this.getStatus.bind(this)),this.element.querySelector(".create-ticket").addEventListener("click",this.createNewTicket.bind(this))}createNewTicket(e){e.preventDefault(),this.createForm.show(e.target)}showFormDelete(e){if(e.preventDefault(),e.target.classList.contains("delete-ticket")){const t=e.target.closest("li");this.deleteForm.show(t.dataset.index)}}showFormCreate(e){if(e.preventDefault(),e.target.classList.contains("edit-ticket")){const t=e.target.closest("li");this.editForm.show(t)}}async showDescription(e){if(e.preventDefault(),!e.target.classList.contains("text"))return;const t=e.target.closest("li");if(t.querySelector(".description"))return void t.querySelector(".description").remove();const n=t.dataset.index,r=`\n      <p class='description'>${(await this.getDescription(n)).description}</p>`;t.insertAdjacentHTML("beforeend",r)}async getStatus(e){if(e.preventDefault(e),!e.target.classList.contains("button-status"))return;const t=e.target.closest("li"),n=t.dataset.index;this.status=null,t.querySelector(".button-status").classList.contains("done")?this.status=!1:this.status=!0;const i=await this.getDescription(n),o={data:{method:"editTicket",id:i.id,status:this.status,name:i.name,description:i.description,created:i.created},method:"PUT"};try{this.rawTicket(await r(o))}catch(e){console.log(e)}}rawTicket(e){const t=this.element.querySelector(".tickets");t.innerHTML="",e.forEach((e=>{const{id:n,name:r,status:i,created:o}=e,s=`<li class="ticket" data-index="${n}">\n        <button class="button-status"></button>\n        <span class="text">${r}</span>\n        <span class="create">${this.dateToString(o)}</span>\n        <button class="edit-ticket"></button>\n        <button class="delete-ticket">X</button>\n        </li>`;t.insertAdjacentHTML("beforeend",s),!0===i&&t.querySelector(`[data-index="${n}"]`).querySelector(".button-status").classList.add("done")}))}dateToString(e){return new Date(e).toLocaleString("ru-Ru",{year:"2-digit",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit"}).replace(/[,%]/g,"")}async getDescription(e){this.params={data:{method:"ticketById",id:e},method:"GET"};try{return await r(this.params)}catch(e){console.log(e)}}}(document.querySelector(".container")).init()},783:(e,t,n)=>{var r=n(618),i=Object.create(null),o="undefined"==typeof document,s=Array.prototype.forEach;function a(){}function c(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function d(){var e=document.querySelectorAll("link");s.call(e,(function(e){!0!==e.visited&&c(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(o)return console.log("no window.document found, will not HMR CSS"),a;var n,u,h=function(e){var t=i[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),o=n[n.length-1];o&&(t=o.src)}i[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),i=n&&n[1];return i&&e?e.split(",").map((function(e){var n=new RegExp("".concat(i,"\\.js$"),"g");return r(t.replace(n,"".concat(e.replace(/{fileName}/g,i),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=h(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return s.call(t,(function(t){if(t.href){var i=function(e,t){var n;return e=r(e),t.some((function(r){e.indexOf(t)>-1&&(n=r)})),n}(t.href,e);l(i)&&!0!==t.visited&&i&&(c(t,i),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void d();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),d())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return n.apply(e,t)}),50)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),r=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+r+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},177:(e,t,n)=>{var r=n(783)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},r={};function i(e){var t=r[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var o=r[e]={id:e,exports:{}};try{var s={id:e,module:o,factory:n[e],require:i};i.i.forEach((function(e){e(s)})),o=s.module,s.factory.call(o.exports,o,o.exports,s.require)}catch(e){throw o.error=e,e}return o.exports}i.m=n,i.c=r,i.i=[],i.hu=e=>e+"."+i.h()+".hot-update.js",i.miniCssF=e=>{},i.hmrF=()=>"main."+i.h()+".hot-update.json",i.h=()=>"c2971b01a8aceeada74f",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="helpdesk_frontend:",i.l=(n,r,o,s)=>{if(e[n])e[n].push(r);else{var a,c;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+o){a=u;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,i.nc&&a.setAttribute("nonce",i.nc),a.setAttribute("data-webpack",t+o),a.src=n),e[n]=[r];var h=(t,r)=>{a.onerror=a.onload=null,clearTimeout(p);var i=e[n];if(delete e[n],a.parentNode&&a.parentNode.removeChild(a),i&&i.forEach((e=>e(r))),t)return t(r)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),c&&document.head.appendChild(a)}},(()=>{var e,t,n,r={},o=i.c,s=[],a=[],c="idle",d=0,l=[];function u(e){c=e;for(var t=[],n=0;n<a.length;n++)t[n]=a[n].call(null,e);return Promise.all(t)}function h(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(i.hmrM).then((function(n){return n?u("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(i.hmrC).reduce((function(e,o){return i.hmrC[o](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return r}))},0===d?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):m(e)}function m(e){e=e||{},v();var r=t.map((function(t){return t(e)}));t=void 0;var i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return u("abort").then((function(){throw i[0]}));var o=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var s,a=u("apply"),c=function(e){s||(s=e)},d=[];return r.forEach((function(e){if(e.apply){var t=e.apply(c);if(t)for(var n=0;n<t.length;n++)d.push(t[n])}})),Promise.all([o,a]).then((function(){return s?u("fail").then((function(){throw s})):n?m(e).then((function(e){return d.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return d}))}))}function v(){if(n)return t||(t=[]),Object.keys(i.hmrI).forEach((function(e){n.forEach((function(n){i.hmrI[e](n,t)}))})),n=void 0,!0}i.hmrD=r,i.i.push((function(l){var m,v,y,b,g=l.module,w=function(t,n){var r=o[n];if(!r)return t;var i=function(i){if(r.hot.active){if(o[i]){var a=o[i].parents;-1===a.indexOf(n)&&a.push(n)}else s=[n],e=i;-1===r.children.indexOf(i)&&r.children.push(i)}else console.warn("[HMR] unexpected require("+i+") from disposed module "+n),s=[];return t(i)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(i,l,a(l));return i.e=function(e){return function(e){switch(c){case"ready":u("prepare");case"prepare":return d++,e.then(h,h),e;default:return e}}(t.e(e))},i}(l.require,l.id);g.hot=(m=l.id,v=g,b={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){s=v.parents.slice(),e=y?void 0:m,i(m)},active:!0,accept:function(e,t,n){if(void 0===e)b._selfAccepted=!0;else if("function"==typeof e)b._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)b._acceptedDependencies[e[r]]=t||function(){},b._acceptedErrorHandlers[e[r]]=n;else b._acceptedDependencies[e]=t||function(){},b._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)b._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)b._declinedDependencies[e[t]]=!0;else b._declinedDependencies[e]=!0},dispose:function(e){b._disposeHandlers.push(e)},addDisposeHandler:function(e){b._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=b._disposeHandlers.indexOf(e);t>=0&&b._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":t=[],Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(i.hmrI).forEach((function(e){i.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:p,apply:f,status:function(e){if(!e)return c;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var t=a.indexOf(e);t>=0&&a.splice(t,1)},data:r[m]},e=void 0,b),g.parents=s,g.children=[],s=[],l.require=w})),i.hmrC={},i.hmrI={}})(),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],n=n=>({dispose:()=>{for(var t=0;t<e.length;t++){var n=e[t];n.parentNode&&n.parentNode.removeChild(n)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});i.hmrC.miniCss=(r,o,s,a,c,d)=>{c.push(n),r.forEach((n=>{var r=i.miniCssF(n),o=i.p+r,s=((e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var i=(s=n[r]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(i===e||i===t))return s}var o=document.getElementsByTagName("style");for(r=0;r<o.length;r++){var s;if((i=(s=o[r]).getAttribute("data-href"))===e||i===t)return s}})(r,o);s&&a.push(new Promise(((r,i)=>{var a=((e,t,n,r,i)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=n=>{if(o.onerror=o.onload=null,"load"===n.type)r();else{var s=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.href||t,c=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=s,c.request=a,o.parentNode&&o.parentNode.removeChild(o),i(c)}},o.href=t,n?n.parentNode.insertBefore(o,n.nextSibling):document.head.appendChild(o),o})(n,o,s,(()=>{a.as="style",a.rel="preload",r()}),i);e.push(s),t.push(a)})))}))}}})(),(()=>{var e,t,n,r,o,s=i.hmrS_jsonp=i.hmrS_jsonp||{179:0},a={};function c(t,n){return e=n,new Promise(((e,n)=>{a[t]=e;var r=i.p+i.hu(t),o=new Error;i.l(r,(e=>{if(a[t]){a[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+i+")",o.name="ChunkLoadError",o.type=r,o.request=i,n(o)}}))}))}function d(e){function a(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),s=o.id,a=o.chain,d=i.c[s];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:s};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:s};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],h=i.c[u];if(h){if(h.hot._declinedDependencies[s])return{type:"declined",chain:a.concat([u]),moduleId:s,parentId:u};-1===t.indexOf(u)&&(h.hot._acceptedDependencies[s]?(n[u]||(n[u]=[]),c(n[u],[s])):(delete n[u],t.push(u),r.push({chain:a.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}i.f&&delete i.f.jsonpHmr,t=void 0;var d={},l=[],u={},h=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in n)if(i.o(n,p)){var f,m=n[p],v=!1,y=!1,b=!1,g="";switch((f=m?a(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+g));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+g));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":e.onAccepted&&e.onAccepted(f),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),b=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(y)for(p in u[p]=m,c(l,f.outdatedModules),f.outdatedDependencies)i.o(f.outdatedDependencies,p)&&(d[p]||(d[p]=[]),c(d[p],f.outdatedDependencies[p]));b&&(c(l,[f.moduleId]),u[p]=h)}n=void 0;for(var w,E=[],k=0;k<l.length;k++){var S=l[k],D=i.c[S];D&&(D.hot._selfAccepted||D.hot._main)&&u[S]!==h&&!D.hot._selfInvalidated&&E.push({module:S,require:D.hot._requireSelf,errorHandler:D.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete s[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var o=n.pop(),a=i.c[o];if(a){var c={},u=a.hot._disposeHandlers;for(k=0;k<u.length;k++)u[k].call(null,c);for(i.hmrD[o]=c,a.hot.active=!1,delete i.c[o],delete d[o],k=0;k<a.children.length;k++){var h=i.c[a.children[k]];h&&(e=h.parents.indexOf(o))>=0&&h.parents.splice(e,1)}}}for(var p in d)if(i.o(d,p)&&(a=i.c[p]))for(w=d[p],k=0;k<w.length;k++)t=w[k],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(t){for(var n in u)i.o(u,n)&&(i.m[n]=u[n]);for(var r=0;r<o.length;r++)o[r](i);for(var s in d)if(i.o(d,s)){var a=i.c[s];if(a){w=d[s];for(var c=[],h=[],p=[],f=0;f<w.length;f++){var m=w[f],v=a.hot._acceptedDependencies[m],y=a.hot._acceptedErrorHandlers[m];if(v){if(-1!==c.indexOf(v))continue;c.push(v),h.push(y),p.push(m)}}for(var b=0;b<c.length;b++)try{c[b].call(null,w)}catch(n){if("function"==typeof h[b])try{h[b](n,{moduleId:s,dependencyId:p[b]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:s,dependencyId:p[b],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:s,dependencyId:p[b],error:n}),e.ignoreErrored||t(n)}}}for(var g=0;g<E.length;g++){var k=E[g],S=k.module;try{k.require(S)}catch(n){if("function"==typeof k.errorHandler)try{k.errorHandler(n,{moduleId:S,module:i.c[S]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:S,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:S,error:n}),e.ignoreErrored||t(n)}}return l}}}self.webpackHotUpdatehelpdesk_frontend=(t,r,s)=>{for(var c in r)i.o(r,c)&&(n[c]=r[c],e&&e.push(c));s&&o.push(s),a[t]&&(a[t](),a[t]=void 0)},i.hmrI.jsonp=function(e,t){n||(n={},o=[],r=[],t.push(d)),i.o(n,e)||(n[e]=i.m[e])},i.hmrC.jsonp=function(e,a,l,u,h,p){h.push(d),t={},r=a,n=l.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){i.o(s,e)&&void 0!==s[e]?(u.push(c(e,p)),t[e]=!0):t[e]=!1})),i.f&&(i.f.jsonpHmr=function(e,n){t&&i.o(t,e)&&!t[e]&&(n.push(c(e)),t[e]=!0)})},i.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(i.p+i.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),i(180)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,